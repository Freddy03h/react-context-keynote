// Context

export const ModalContext = React.createContext({
  setModalElement: element => {}
});

// Provider

function ModalProvider({ children }) {
  const [modalElement, setModalElement] = useState(null);

  return (
    <ModalContext.Provider value={{ setModalElement }}>
      {children}
      <div>{modalElement}</div>
    </ModalContext.Provider>
  );
}

export default ModalProvider;

// Component

export function Modal({
  children,
  isOpen,
  onRequestClose
}) {
  const { setModalElement } = useContext(ModalContext);

  useEffect(() => {
    const child = (
      <div css={styles.container}>
        <div
          css={styles.overlay}
          onClick={onRequestClose}
        />
        <div css={styles.modal}>{children}</div>
      </div>
    );

    setModalElement(child);

    return () => setModalElement(null);
  }, [setModalElement, children, isOpen, onRequestClose]);

  return null;
}

const styles = {
  container: css({
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  }),
  overlay: css({
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba(0,0,0,0.5)",
  }),
  modal: css({
    position: "relative",
    margin: "auto",
  })
};

// Usage in component

function Root() {
  return (
    <ModalProvider>
      <App />
    </ModalProvider>
  );
}

function Page() {
  const [modalIsOpen, setModalIsOpen] = useState(false);

  return (
    <div>
      <p>Lorem ipsum dolor sit amet</p>
      <button onClick={() => setModalIsOpen(true)}>Confirm</button>

      <Modal
        isOpen={modalIsOpen}
        onRequestClose={() => setModalIsOpen(false)}
      >
        <div>Info</div>
        <button onClick={() => setModalIsOpen(false)}>Ok</button>
      </Modal>
    </div>
  )
}
