// Config

const gridStyle = {
  gutterWidth: 16,
  columns: 12,
  maxWidth: 1440,
  minWidth: 1024,
  maxTabletWidth: 1280
}

const gutterCount = grid.columns + 1;
const totalGuttersWidth = gutterCount * grid.gutterWidth;

function clamp(num, min, max) {
  return Math.min(max, Math.max(min, num));
}

function findColumnWidth(windowWidth) {
  const clampedWidth =
    clamp(windowWidth, grid.minWidth, grid.maxWidth);
  const availableWidthWithoutGutters =
    clampedWidth - totalGuttersWidth;
  const columnWidth =
    availableWidthWithoutGutters / grid.columns;
  return Math.floor(columnWidth);
}

function findLayoutType(windowWidth) {
  if (windowWidth < gridStyle.minWidth) {
    return "mobile";
  } else if (windowWidth < gridStyle.maxTabletWidth) {
    return "tablet";
  } else {
    return "desktop";
  }
}

// Context

export const GridContext = React.createContext({
  columnWidth: findColumnWidth(window.innerWidth),
  gutterWidth: grid.gutterWidth,
  layoutType: findLayoutType(window.innerWidth)
});

// Component with Provider

function Grid({ children }) {
  const [layoutType, setLayoutType] = React.useState(
    findLayoutType(window.innerWidth)
  );
  const [columnWidth, setColumnWidth] = useState(
    findColumnWidth(window.innerWidth)
  );

  const handleResize = useCallback(
    (event) => {
      setColumnWidth(
        findColumnWidth(event.currentTarget.innerWidth)
      );
      setLayoutType(
        findLayoutType(event.currentTarget.innerWidth)
      );
    },
    [setColumnWidth, setLayoutType]
  );

  React.useEffect(() => {
    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  });

  const value = useMemo(
    () => ({
      columnWidth,
      gutterWidth: grid.gutterWidth,
      layoutType
    }),
    [columnWidth, layoutType]
  );

  return (
    <GridContext.Provider value={value}>
      {children}
    </GridContext.Provider>
  );
}

export default Grid;

// Hooks

export const useGridContext = () => useContext(GridContext);

export const useLayoutType = () => {
  const { layoutType } = useGridContext();
  return layoutType;
};

export const useColumnsWidth = (numColumns) => {
  const { columnWidth, gutterWidth } = useGridContext();

  const totalColumnWidth = columnWidth * numColumns;
  const totalGutterWidth = gutterWidth * (numColumns - 1);
  return totalColumnWidth + totalGutterWidth;
};

// Usage in component

function Root() {
  return (
    <Grid>
      <App />
    </Grid>
  );
}

function MyComponent() {
  const width = useColumnsWidth(2);
  const layoutType = useLayoutType();

  return (
    <div
      css={[
        style.container,
        layoutType === "desktop" && css({ width })
      ]}
    >
      â€¦
    </div>
  )
}
